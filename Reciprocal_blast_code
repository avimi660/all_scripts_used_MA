```
## created reciprocal blast script next to take the human gene name search for it in possum and then search for that back into humans to see if we get good matches completed multiple of these each using different output files from the blast script above. 
# multiple of these were created in order to use all the output files i had generated before 

# Before you run all of this, need to make human genome blast-indexed
# makeblastdb -in human_genome_name -dbtype nucl

# Name of input files the name of the input file changed we had the original one here and then.                                                      # blast_gene_location_possum.txt,new_gene_name_location_possum.txt, new_blast_match_gene_location_possum.txt, manual_search_list_combined.txt - i   # ended up making a different script separately for each of these just copying and pasting the input name differently each time

input_gene_location=gene_location_possum.txt
genome_to_pull_fasta_from=GCF_011100635.1_mTriVul1.pri_genomic
genome_to_search=GCF_000001405.39_GRCh38.p13_genomic

location_total_lines=`wc -l $input_gene_location | awk '{ print $1 }'`

for location_line in `seq 1 1 $location_total_lines`; 

  do reciprocal_blast_line=`head -n $location_line $input_gene_location | tail -n 1`
  
  human_gene_name=`echo $reciprocal_blast_line | awk '{ print $1 }'` 
  
  echo $reciprocal_blast_line | cut -f 1 -d ' ' --complement | sed 's/ /'$'\t/g' > temp_possum.gff
  
  echo $human_gene_name
  
  bedtools intersect -a $genome_to_pull_fasta_from.gff -b temp_possum.gff | grep $'\t'CDS$'\t' > temp_possum_CDS.gff
  
      if [ `wc -l temp_possum_CDS.gff | awk '{ print $1 }'` -eq 0 ]; then
      
         echo "no_CDS" $reciprocal_blast_line >> reciprocal_blast_matches.txt;
      
      else
  
        bedtools getfasta -fi $genome_to_pull_fasta_from.fna -bed temp_possum_CDS.gff > temp_possum.fna
  
        blastn -task blastn -db $genome_to_search.fna -query temp_possum.fna -evalue 0.05 -word_size 11 -gapopen 5 -gapextend 2 -penalty -3 -reward 2 -outfmt 6 > temp.blast

        if [ `wc -l temp.blast | awk '{ print $1 }'` -eq 0 ]; then

            echo "no_matches" $reciprocal_blast_line >> reciprocal_blast_matches.txt;

        else
    
        Rscript blast_match.R
  
          if [[ -f multiple_scaffold_matches.txt ]]; then
            mv multiple_scaffold_matches.txt $gene_search_term.rb.multiple_scaffold_matches.txt;
            echo "multiple_scaffold_matches" $reciprocal_blast_line >> reciprocal_blast_matches.txt;
         else
            if [[ -f all_blast_matches.txt ]]; then
                mv all_blast_matches.txt $gene_search_term.rb.all_blast_matches.txt;
                echo "matches_not_refined" $reciprocal_blast_line >> reciprocal_blast_matches.txt;
            else    
                found_gene_name=`bedtools intersect -a $genome_to_search.gff -b match.bed | grep $'\t'gene$'\t' | head -n 1 | sed 's/.*ID=gene-//g' | sed 's/;.*//g'`
                  if [ `echo $found_gene_name | wc -w` -eq 0 ]; then
                      mv match.bed $gene_search_term.rb.match.bed
                      echo "match_not_in_gene_region" $reciprocal_blast_line >> reciprocal_blast_matches.txt;
                  else
                      echo $found_gene_name $reciprocal_blast_line >> reciprocal_blast_matches.txt;
                      rm match.bed
                  fi      
            fi    
          fi
        fi
       
  fi  

  rm temp*

done
